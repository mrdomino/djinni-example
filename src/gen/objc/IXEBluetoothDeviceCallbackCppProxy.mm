// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEBluetoothDeviceCallbackCppProxy+Private.h"
#import "DJIError.h"
#import "IXEBluetoothDeviceCallback.h"
#import "IXEBluetoothDeviceObjcProxy+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@implementation IXEBluetoothDeviceCallbackCppProxy

- (id)initWithCpp:(const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> &)cppRef
{
    if (self = [super init]) {
        _cppRef = cppRef;
    }
    return self;
}

- (void)dealloc
{
    djinni::DbxCppWrapperCache<::interaxon::example::BluetoothDeviceCallback> & cache = djinni::DbxCppWrapperCache<::interaxon::example::BluetoothDeviceCallback>::getInstance();
    cache.remove(_cppRef);
}

+ (id)bluetoothDeviceCallbackWithCpp:(const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> &)cppRef
{
    djinni::DbxCppWrapperCache<::interaxon::example::BluetoothDeviceCallback> & cache = djinni::DbxCppWrapperCache<::interaxon::example::BluetoothDeviceCallback>::getInstance();
    return cache.get(cppRef, [] (const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> & p) { return [[IXEBluetoothDeviceCallbackCppProxy alloc] initWithCpp:p]; });
}

- (void)gotDevice:(id <IXEBluetoothDevice>)device {
    try {
        std::shared_ptr<::interaxon::example::BluetoothDevice> cppDevice = ::dropboxsync::BluetoothDeviceObjcProxy::bluetooth_device_with_objc(device);
        _cppRef->got_device(std::move(cppDevice));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

@end
