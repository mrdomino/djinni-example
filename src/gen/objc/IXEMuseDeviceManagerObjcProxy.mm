// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEMuseDeviceManagerObjcProxy+Private.h"
#import "IXEBluetoothDeviceCallbackCppProxy+Private.h"
#import "IXEBluetoothDeviceObjcProxy+Private.h"
#import "IXEDeviceCallbackHandleObjcProxy+Private.h"
#import "IXEDuration+Private.h"
#import "IXEMuseDeviceManager.h"

namespace dropboxsync
{
    MuseDeviceManagerObjcProxy::MuseDeviceManagerObjcProxy (id objcRef)
    {
        assert([[objcRef class] conformsToProtocol:@protocol(IXEMuseDeviceManager)]);
        this->objcRef = objcRef;
    }

    MuseDeviceManagerObjcProxy::~MuseDeviceManagerObjcProxy ()
    {
        djinni::DbxObjcWrapperCache<MuseDeviceManagerObjcProxy> & cache = djinni::DbxObjcWrapperCache<MuseDeviceManagerObjcProxy>::getInstance();
        cache.remove(objcRef);
    }

    std::shared_ptr<::interaxon::example::MuseDeviceManager> MuseDeviceManagerObjcProxy::muse_device_manager_with_objc (id objcRef)
    {
        djinni::DbxObjcWrapperCache<MuseDeviceManagerObjcProxy> & cache = djinni::DbxObjcWrapperCache<MuseDeviceManagerObjcProxy>::getInstance();
        return static_cast<std::shared_ptr<::interaxon::example::MuseDeviceManager>>(cache.get(objcRef));
    }

    std::vector<std::shared_ptr<BluetoothDevice>> MuseDeviceManagerObjcProxy::all_muses ()
    {
        @autoreleasepool {
            NSArray *objcRet = [objcRef allMuses];
            std::vector<std::shared_ptr<::interaxon::example::BluetoothDevice>> cppRet;
            cppRet.reserve([objcRet count]);
            for (id <IXEBluetoothDevice> objcValue_0 in objcRet) {
                std::shared_ptr<::interaxon::example::BluetoothDevice> cppValue_0 = ::dropboxsync::BluetoothDeviceObjcProxy::bluetooth_device_with_objc(objcValue_0);
                cppRet.push_back(std::move(cppValue_0));
            }
            return cppRet;
        }
    }

    std::shared_ptr<BluetoothDevice> MuseDeviceManagerObjcProxy::wait_for_muse_until (const std::optional<::interaxon::example::Duration> & timeout)
    {
        @autoreleasepool {
            IXEDuration *cpp_timeout;
            if (timeout) {
                cpp_timeout = [[IXEDuration alloc] initWithCppDuration:(*(timeout))];
            } else {
                cpp_timeout = nil;
            }
            id <IXEBluetoothDevice> objcRet = [objcRef waitForMuseUntil:cpp_timeout];
            std::shared_ptr<::interaxon::example::BluetoothDevice> cppRet = ::dropboxsync::BluetoothDeviceObjcProxy::bluetooth_device_with_objc(objcRet);
            return cppRet;
        }
    }

    std::shared_ptr<DeviceCallbackHandle> MuseDeviceManagerObjcProxy::add_device_callback (const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> & callback)
    {
        @autoreleasepool {
            id <IXEBluetoothDeviceCallback> cpp_callback = [IXEBluetoothDeviceCallbackCppProxy bluetoothDeviceCallbackWithCpp:callback];
            id <IXEDeviceCallbackHandle> objcRet = [objcRef addDeviceCallback:cpp_callback];
            std::shared_ptr<::interaxon::example::DeviceCallbackHandle> cppRet = ::dropboxsync::DeviceCallbackHandleObjcProxy::device_callback_handle_with_objc(objcRet);
            return cppRet;
        }
    }
}
