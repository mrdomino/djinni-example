// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEPlatformObjcProxy+Private.h"
#import "IXEActionCppProxy+Private.h"
#import "IXEBluetoothConnectionCallbackCppProxy+Private.h"
#import "IXEBluetoothConnectionHandleObjcProxy+Private.h"
#import "IXEBluetoothDeviceCallbackCppProxy+Private.h"
#import "IXEBluetoothDeviceObjcProxy+Private.h"
#import "IXEDeviceCallbackHandleObjcProxy+Private.h"
#import "IXEDuration+Private.h"
#import "IXEErrorableCppProxy+Private.h"
#import "IXEIntervalHandleObjcProxy+Private.h"
#import "IXEPlatform.h"

namespace dropboxsync
{
    PlatformObjcProxy::PlatformObjcProxy (id objcRef)
    {
        assert([[objcRef class] conformsToProtocol:@protocol(IXEPlatform)]);
        this->objcRef = objcRef;
    }

    PlatformObjcProxy::~PlatformObjcProxy ()
    {
        djinni::DbxObjcWrapperCache<PlatformObjcProxy> & cache = djinni::DbxObjcWrapperCache<PlatformObjcProxy>::getInstance();
        cache.remove(objcRef);
    }

    std::shared_ptr<::interaxon::example::Platform> PlatformObjcProxy::platform_with_objc (id objcRef)
    {
        djinni::DbxObjcWrapperCache<PlatformObjcProxy> & cache = djinni::DbxObjcWrapperCache<PlatformObjcProxy>::getInstance();
        return static_cast<std::shared_ptr<::interaxon::example::Platform>>(cache.get(objcRef));
    }

    void PlatformObjcProxy::defer_action (const std::shared_ptr<::interaxon::example::Action> & act, const ::interaxon::example::Duration & until)
    {
        @autoreleasepool {
            id <IXEAction> cpp_act = [IXEActionCppProxy actionWithCpp:act];
            IXEDuration *cpp_until = [[IXEDuration alloc] initWithCppDuration:until];
            [objcRef deferAction:cpp_act until:cpp_until];
        }
    }

    void PlatformObjcProxy::thread_action (const std::shared_ptr<::interaxon::example::Errorable> & act)
    {
        @autoreleasepool {
            id <IXEErrorable> cpp_act = [IXEErrorableCppProxy errorableWithCpp:act];
            [objcRef threadAction:cpp_act];
        }
    }

    std::shared_ptr<IntervalHandle> PlatformObjcProxy::repeat_action (const std::shared_ptr<::interaxon::example::Action> & act, const ::interaxon::example::Duration & at_interval)
    {
        @autoreleasepool {
            id <IXEAction> cpp_act = [IXEActionCppProxy actionWithCpp:act];
            IXEDuration *cpp_at_interval = [[IXEDuration alloc] initWithCppDuration:at_interval];
            id <IXEIntervalHandle> objcRet = [objcRef repeatAction:cpp_act atInterval:cpp_at_interval];
            std::shared_ptr<::interaxon::example::IntervalHandle> cppRet = ::dropboxsync::IntervalHandleObjcProxy::interval_handle_with_objc(objcRet);
            return cppRet;
        }
    }

    std::vector<std::shared_ptr<BluetoothDevice>> PlatformObjcProxy::all_devices ()
    {
        @autoreleasepool {
            NSArray *objcRet = [objcRef allDevices];
            std::vector<std::shared_ptr<::interaxon::example::BluetoothDevice>> cppRet;
            cppRet.reserve([objcRet count]);
            for (id <IXEBluetoothDevice> objcValue_0 in objcRet) {
                std::shared_ptr<::interaxon::example::BluetoothDevice> cppValue_0 = ::dropboxsync::BluetoothDeviceObjcProxy::bluetooth_device_with_objc(objcValue_0);
                cppRet.push_back(std::move(cppValue_0));
            }
            return cppRet;
        }
    }

    std::shared_ptr<BluetoothDevice> PlatformObjcProxy::wait_for_device_until (const std::optional<::interaxon::example::Duration> & timeout)
    {
        @autoreleasepool {
            IXEDuration *cpp_timeout;
            if (timeout) {
                cpp_timeout = [[IXEDuration alloc] initWithCppDuration:(*(timeout))];
            } else {
                cpp_timeout = nil;
            }
            id <IXEBluetoothDevice> objcRet = [objcRef waitForDeviceUntil:cpp_timeout];
            std::shared_ptr<::interaxon::example::BluetoothDevice> cppRet = ::dropboxsync::BluetoothDeviceObjcProxy::bluetooth_device_with_objc(objcRet);
            return cppRet;
        }
    }

    std::shared_ptr<DeviceCallbackHandle> PlatformObjcProxy::add_device_callback (const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> & callback)
    {
        @autoreleasepool {
            id <IXEBluetoothDeviceCallback> cpp_callback = [IXEBluetoothDeviceCallbackCppProxy bluetoothDeviceCallbackWithCpp:callback];
            id <IXEDeviceCallbackHandle> objcRet = [objcRef addDeviceCallback:cpp_callback];
            std::shared_ptr<::interaxon::example::DeviceCallbackHandle> cppRet = ::dropboxsync::DeviceCallbackHandleObjcProxy::device_callback_handle_with_objc(objcRet);
            return cppRet;
        }
    }

    std::shared_ptr<BluetoothConnectionHandle> PlatformObjcProxy::connect_to_device (const std::shared_ptr<::interaxon::example::BluetoothDevice> & device, const std::shared_ptr<::interaxon::example::BluetoothConnectionCallback> & callback)
    {
        @autoreleasepool {
            id <IXEBluetoothDevice> cpp_device = std::static_pointer_cast<::dropboxsync::BluetoothDeviceObjcProxy>(device)->objcRef;
            id <IXEBluetoothConnectionCallback> cpp_callback = [IXEBluetoothConnectionCallbackCppProxy bluetoothConnectionCallbackWithCpp:callback];
            id <IXEBluetoothConnectionHandle> objcRet = [objcRef connectToDevice:cpp_device callback:cpp_callback];
            std::shared_ptr<::interaxon::example::BluetoothConnectionHandle> cppRet = ::dropboxsync::BluetoothConnectionHandleObjcProxy::bluetooth_connection_handle_with_objc(objcRet);
            return cppRet;
        }
    }
}
