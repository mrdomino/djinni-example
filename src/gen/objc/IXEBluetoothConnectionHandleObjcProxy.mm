// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEBluetoothConnectionHandleObjcProxy+Private.h"
#import "IXEBluetoothConnectionHandle.h"

namespace dropboxsync
{
    BluetoothConnectionHandleObjcProxy::BluetoothConnectionHandleObjcProxy (id objcRef)
    {
        assert([[objcRef class] conformsToProtocol:@protocol(IXEBluetoothConnectionHandle)]);
        this->objcRef = objcRef;
    }

    BluetoothConnectionHandleObjcProxy::~BluetoothConnectionHandleObjcProxy ()
    {
        djinni::DbxObjcWrapperCache<BluetoothConnectionHandleObjcProxy> & cache = djinni::DbxObjcWrapperCache<BluetoothConnectionHandleObjcProxy>::getInstance();
        cache.remove(objcRef);
    }

    std::shared_ptr<::interaxon::example::BluetoothConnectionHandle> BluetoothConnectionHandleObjcProxy::bluetooth_connection_handle_with_objc (id objcRef)
    {
        djinni::DbxObjcWrapperCache<BluetoothConnectionHandleObjcProxy> & cache = djinni::DbxObjcWrapperCache<BluetoothConnectionHandleObjcProxy>::getInstance();
        return static_cast<std::shared_ptr<::interaxon::example::BluetoothConnectionHandle>>(cache.get(objcRef));
    }

    int64_t BluetoothConnectionHandleObjcProxy::write (const std::vector<uint8_t> & bytes)
    {
        @autoreleasepool {
            NSData *cpp_bytes = [NSData dataWithBytes:(&bytes[0]) length:(bytes.size())];
            int64_t objcRet = [objcRef write:cpp_bytes];
            int64_t cppRet = objcRet;
            return cppRet;
        }
    }

    void BluetoothConnectionHandleObjcProxy::close ()
    {
        @autoreleasepool {
            [objcRef close];
        }
    }
}
