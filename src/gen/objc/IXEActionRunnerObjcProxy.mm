// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEActionRunnerObjcProxy+Private.h"
#import "IXEActionCppProxy+Private.h"
#import "IXEActionRunner.h"
#import "IXEDuration+Private.h"
#import "IXEErrorableCppProxy+Private.h"
#import "IXEIntervalHandleObjcProxy+Private.h"

namespace dropboxsync
{
    ActionRunnerObjcProxy::ActionRunnerObjcProxy (id objcRef)
    {
        assert([[objcRef class] conformsToProtocol:@protocol(IXEActionRunner)]);
        this->objcRef = objcRef;
    }

    ActionRunnerObjcProxy::~ActionRunnerObjcProxy ()
    {
        djinni::DbxObjcWrapperCache<ActionRunnerObjcProxy> & cache = djinni::DbxObjcWrapperCache<ActionRunnerObjcProxy>::getInstance();
        cache.remove(objcRef);
    }

    std::shared_ptr<::interaxon::example::ActionRunner> ActionRunnerObjcProxy::action_runner_with_objc (id objcRef)
    {
        djinni::DbxObjcWrapperCache<ActionRunnerObjcProxy> & cache = djinni::DbxObjcWrapperCache<ActionRunnerObjcProxy>::getInstance();
        return static_cast<std::shared_ptr<::interaxon::example::ActionRunner>>(cache.get(objcRef));
    }

    void ActionRunnerObjcProxy::defer_action (const std::shared_ptr<::interaxon::example::Action> & act, const ::interaxon::example::Duration & until)
    {
        @autoreleasepool {
            id <IXEAction> cpp_act = [IXEActionCppProxy actionWithCpp:act];
            IXEDuration *cpp_until = [[IXEDuration alloc] initWithCppDuration:until];
            [objcRef deferAction:cpp_act until:cpp_until];
        }
    }

    void ActionRunnerObjcProxy::thread_action (const std::shared_ptr<::interaxon::example::Errorable> & act)
    {
        @autoreleasepool {
            id <IXEErrorable> cpp_act = [IXEErrorableCppProxy errorableWithCpp:act];
            [objcRef threadAction:cpp_act];
        }
    }

    std::shared_ptr<IntervalHandle> ActionRunnerObjcProxy::repeat_action (const std::shared_ptr<::interaxon::example::Action> & act, const ::interaxon::example::Duration & at_interval)
    {
        @autoreleasepool {
            id <IXEAction> cpp_act = [IXEActionCppProxy actionWithCpp:act];
            IXEDuration *cpp_at_interval = [[IXEDuration alloc] initWithCppDuration:at_interval];
            id <IXEIntervalHandle> objcRet = [objcRef repeatAction:cpp_act atInterval:cpp_at_interval];
            std::shared_ptr<::interaxon::example::IntervalHandle> cppRet = ::dropboxsync::IntervalHandleObjcProxy::interval_handle_with_objc(objcRet);
            return cppRet;
        }
    }
}
