// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEBluetoothConnectionCallbackCppProxy+Private.h"
#import "DJIError.h"
#import "IXEBluetoothConnectionCallback.h"
#import "IXEError+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@implementation IXEBluetoothConnectionCallbackCppProxy

- (id)initWithCpp:(const std::shared_ptr<::interaxon::example::BluetoothConnectionCallback> &)cppRef
{
    if (self = [super init]) {
        _cppRef = cppRef;
    }
    return self;
}

- (void)dealloc
{
    djinni::DbxCppWrapperCache<::interaxon::example::BluetoothConnectionCallback> & cache = djinni::DbxCppWrapperCache<::interaxon::example::BluetoothConnectionCallback>::getInstance();
    cache.remove(_cppRef);
}

+ (id)bluetoothConnectionCallbackWithCpp:(const std::shared_ptr<::interaxon::example::BluetoothConnectionCallback> &)cppRef
{
    djinni::DbxCppWrapperCache<::interaxon::example::BluetoothConnectionCallback> & cache = djinni::DbxCppWrapperCache<::interaxon::example::BluetoothConnectionCallback>::getInstance();
    return cache.get(cppRef, [] (const std::shared_ptr<::interaxon::example::BluetoothConnectionCallback> & p) { return [[IXEBluetoothConnectionCallbackCppProxy alloc] initWithCpp:p]; });
}

- (void)onOpen {
    try {
        _cppRef->on_open();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onClose:(IXEError *)error {
    try {
        ::interaxon::example::Error cppError = std::move([error cppError]);
        bool cppRet = _cppRef->on_close(std::move(cppError));
        BOOL objcRet = (cppRet) ? YES : NO;
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onRead:(NSData *)bytes {
    try {
        std::vector<uint8_t> cppBytes([bytes length]);
        [bytes getBytes:(static_cast<void *>(cppBytes.data())) length:[bytes length]];
        _cppRef->on_read(std::move(cppBytes));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)canWrite {
    try {
        _cppRef->can_write();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

@end
