// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#import "IXEMuseDeviceManager.h"
#include "muse_device_manager.hpp"
#import "DJIObjcWrapperCache+Private.h"
#import <Foundation/Foundation.h>
#include <memory>

namespace dropboxsync
{
    class MuseDeviceManagerObjcProxy final : public ::interaxon::example::MuseDeviceManager
    {
        public:
        id <IXEMuseDeviceManager> objcRef;
        MuseDeviceManagerObjcProxy (id objcRef);
        virtual ~MuseDeviceManagerObjcProxy () override;
        static std::shared_ptr<::interaxon::example::MuseDeviceManager> muse_device_manager_with_objc (id objcRef);
        virtual std::vector<std::shared_ptr<BluetoothDevice>> all_muses () override;
        virtual std::shared_ptr<BluetoothDevice> wait_for_muse_until (const std::optional<::interaxon::example::Duration> & timeout) override;
        virtual std::shared_ptr<DeviceCallbackHandle> add_device_callback (const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> & callback) override;

        private:
        MuseDeviceManagerObjcProxy () {};
    };
}
