// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#pragma once

#include "error.hpp"
#include <cstdint>
#include <vector>

namespace interaxon { namespace example {

/** Owned by the platform code. Provides callbacks on various connection events. */
class BluetoothConnectionCallback {
public:
    virtual ~BluetoothConnectionCallback() {}

    /** Called once when the connection has opened successfully. */
    virtual void on_open() = 0;

    /**
     * Called once when the connection ends for any reason. Returns true iff
     * caller should retry the connection.
     */
    virtual bool on_close(const Error & error) = 0;

    /**
     * Called every time data is read from the connection. Callee must consume
     * (or buffer) all bytes.
     */
    virtual void on_read(const std::vector<uint8_t> & bytes) = 0;

    /**
     * Called every time data can be written to the handle. Will be called
     * repeatedly as long as write is called on the handle and space is
     * available.
     */
    virtual void can_write() = 0;
};

} }  // namespace interaxon::example
