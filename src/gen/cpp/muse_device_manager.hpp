// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#pragma once

#include "duration.hpp"
#include <memory>
#include <optional>
#include <vector>

namespace interaxon { namespace example {

class BluetoothDevice;
class BluetoothDeviceCallback;
class DeviceCallbackHandle;

/**
 * Provides various different mechanisms for getting a device corresponding to a
 * Muse.
 */
class MuseDeviceManager {
public:
    virtual ~MuseDeviceManager() {}

    /** Returns all Muses we know about at this moment. */
    virtual std::vector<std::shared_ptr<BluetoothDevice>> all_muses() = 0;

    /** Synchronously waits for a Muse until the timeout expires. */
    virtual std::shared_ptr<BluetoothDevice> wait_for_muse_until(const std::optional<Duration> & timeout) = 0;

    /** Adds a callback to be called any time a Muse becomes available. */
    virtual std::shared_ptr<DeviceCallbackHandle> add_device_callback(const std::shared_ptr<BluetoothDeviceCallback> & callback) = 0;
};

} }  // namespace interaxon::example
