// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#pragma once

#include "duration.hpp"
#include <memory>

namespace interaxon { namespace example {

class Action;
class Errorable;
class IntervalHandle;

class ActionRunner {
public:
    virtual ~ActionRunner() {}

    /**
     * Act at some later time in the caller's thread. If until is 0, act will be
     * run as soon as possible but not until after the caller has returned (i.e.
     * defer_action will not block if act blocks.)
     */
    virtual void defer_action(const std::shared_ptr<Action> & act, const Duration & until) = 0;

    /**
     * Runs act immediately in a new thread.
     *
     * Calls error() if something went wrong setting up the thread. Only calls
     * ok() on a thread different from the one on which it was called. May call
     * error() from any thread.
     */
    virtual void thread_action(const std::shared_ptr<Errorable> & act) = 0;

    /**
     * Run r at the specified interval. Runs as frequently at possible if the
     * interval is 0 (or is less than the time r takes to complete). Never runs
     * multiple times concurrently. Interval must be non-negative. If r cancels
     * the handle in do, r will not be called again.
     */
    virtual std::shared_ptr<IntervalHandle> repeat_action(const std::shared_ptr<Action> & act, const Duration & at_interval) = 0;
};

} }  // namespace interaxon::example
