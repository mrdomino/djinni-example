// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

#pragma once

#include "djinni_support.hpp"
#include "muse_device_manager.hpp"

namespace djinni_generated {

class MuseDeviceManager final : djinni::JniInterface<::interaxon::example::MuseDeviceManager, MuseDeviceManager> {
public:
    using CppType = std::shared_ptr<::interaxon::example::MuseDeviceManager>;
    using JniType = jobject;

    static jobject toJava(JNIEnv* jniEnv, std::shared_ptr<::interaxon::example::MuseDeviceManager> c) { return djinni::JniClass<::djinni_generated::MuseDeviceManager>::get()._toJava(jniEnv, c); }
    static std::shared_ptr<::interaxon::example::MuseDeviceManager> fromJava(JNIEnv* jniEnv, jobject j) { return djinni::JniClass<::djinni_generated::MuseDeviceManager>::get()._fromJava(jniEnv, j); }

    const djinni::GlobalRef<jclass> clazz { djinni::jniFindClass("com/interaxon/example/MuseDeviceManager") };
    const jmethodID method_allMuses { djinni::jniGetMethodID(clazz.get(), "allMuses", "()Ljava/util/ArrayList;") };
    const jmethodID method_waitForMuseUntil { djinni::jniGetMethodID(clazz.get(), "waitForMuseUntil", "(Lcom/interaxon/example/Duration;)Lcom/interaxon/example/BluetoothDevice;") };
    const jmethodID method_addDeviceCallback { djinni::jniGetMethodID(clazz.get(), "addDeviceCallback", "(Lcom/interaxon/example/BluetoothDeviceCallback;)Lcom/interaxon/example/DeviceCallbackHandle;") };

    class JavaProxy final : djinni::JavaProxyCacheEntry, public ::interaxon::example::MuseDeviceManager {
    public:
        JavaProxy(jobject obj);
        virtual std::vector<std::shared_ptr<::interaxon::example::BluetoothDevice>> all_muses() override;
        virtual std::shared_ptr<::interaxon::example::BluetoothDevice> wait_for_muse_until(const std::optional<::interaxon::example::Duration> & timeout) override;
        virtual std::shared_ptr<::interaxon::example::DeviceCallbackHandle> add_device_callback(const std::shared_ptr<::interaxon::example::BluetoothDeviceCallback> & callback) override;

    private:
        using djinni::JavaProxyCacheEntry::getGlobalRef;
        friend class djinni::JniInterface<::interaxon::example::MuseDeviceManager, ::djinni_generated::MuseDeviceManager>;
        friend class djinni::JavaProxyCache<JavaProxy>;
    };

private:
    MuseDeviceManager();
    friend class djinni::JniClass<::djinni_generated::MuseDeviceManager>;
};

}  // namespace djinni_generated
