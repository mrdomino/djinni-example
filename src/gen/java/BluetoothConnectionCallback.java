// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

package com.interaxon.example;

import java.util.concurrent.atomic.AtomicBoolean;

/** Owned by the platform code. Provides callbacks on various connection events. */
public abstract class BluetoothConnectionCallback {
    /** Called once when the connection has opened successfully. */
    public abstract void onOpen();

    /**
     * Called once when the connection ends for any reason. Returns true iff
     * caller should retry the connection.
     */
    public abstract boolean onClose(Error error);

    /**
     * Called every time data is read from the connection. Callee must consume
     * (or buffer) all bytes.
     */
    public abstract void onRead(byte[] bytes);

    /**
     * Called every time data can be written to the connection. Returns a handle
     * that may be used once. Will be called repeatedly as long as the handle is
     * used and space is available.
     */
    public abstract WriteHandle canWrite();

    public static final class CppProxy extends BluetoothConnectionCallback
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void onOpen()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onOpen(this.nativeRef);
        }
        private native void native_onOpen(long _nativeRef);

        @Override
        public boolean onClose(Error error)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_onClose(this.nativeRef, error);
        }
        private native boolean native_onClose(long _nativeRef, Error error);

        @Override
        public void onRead(byte[] bytes)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onRead(this.nativeRef, bytes);
        }
        private native void native_onRead(long _nativeRef, byte[] bytes);

        @Override
        public WriteHandle canWrite()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_canWrite(this.nativeRef);
        }
        private native WriteHandle native_canWrite(long _nativeRef);
    }
}
