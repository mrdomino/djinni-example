// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from platform.djinni

package com.interaxon.example;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Like action, but exposes a separate method to signal errors, e.g. in
 * connection establishment or starting a thread.
 */
public abstract class Errorable {
    public abstract void do();

    /** Returns true iff caller should retry the action. */
    public abstract boolean error(Error theError);

    public static final class CppProxy extends Errorable
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void do()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_do(this.nativeRef);
        }
        private native void native_do(long _nativeRef);

        @Override
        public boolean error(Error theError)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_error(this.nativeRef, theError);
        }
        private native boolean native_error(long _nativeRef, Error theError);
    }
}
