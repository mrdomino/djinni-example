error_code = enum {
    # We have no idea what happened.
    unknown;
    # The other side refused our attempt.
    refused;
    # Our timeout expired.
    timeout;
    # The other side hung up.
    hangup;
    # We received corrupt or inconsistent data.
    corrupt;
    # We canceled the call.
    canceled;
    # The callee or remote end is overloaded.
    overloaded;
}

error = record {
    code: error_code;
    desc: optional<string>;
}

# General-purpose callable action.
action = interface +c {
    # Run the action. Returns true iff the caller should rerun this action. (A
    # false return cancels an interval action, for instance.)
    ok(): bool;

    # Notify the action that an error occurred setting up its environment.
    # Called e.g. if we requested that this action be run on its own thread and
    # the thread creation failed. Returns true iff the caller should retry this
    # action.
    error(the_error: error): bool;
}

# Time representation.
#
# Really only serves to prevent the antipattern of postfixing all time-related
# integral parameters with '_microseconds'.
duration = record {
    # Must not be negative.
    microseconds: i64;
} deriving (eq, ord)

action_runner = interface +j +o {
    # Runs the action on the main thread at the requested interval. If the
    # interval is zero or shorter than the amount of time the action takes to
    # complete, the action is run as often as possible. If ok() returns false,
    # the interval is canceled. The interval is always relative to the start of
    # the last action.
    on_main_thread_repeat_action(act: action, at_interval: duration);

    # Runs the action in its own thread. Handy for blocking calls. The ok()
    # method is called in a synchronous loop until it returns false.
    on_new_thread_do_action(act: action);
}

# Provides various different mechanisms for getting a device corresponding to a
# Muse.
bluetooth_device_manager = interface +j +o {
    # Returns all devices we know about at this moment.
    all_devices(): list<bluetooth_device>;

    # Adds a callback to be called any time a device becomes available.
    add_device_callback(callback: bluetooth_device_callback):
        device_callback_handle;
}

bluetooth_device_callback = interface +c {
    on_new_device(device: bluetooth_device);
}

device_callback_handle = interface +j +o {
    cancel();
}

bluetooth_device = interface +j +o {
    name(): string;
    address(): string;
    connect(callback: bluetooth_connection_callback):
        bluetooth_connection_handle;
}

# Owned by the native code. Used to signal that we want to write or end the
# connection.
bluetooth_connection_handle = interface +j +o {
    # Write some bytes, or buffer them for later writing.
    write(bytes: binary);

    # Close the connection. on_close() receives an error_code of canceled.
    close();
}

# Owned by the platform code. Provides callbacks on various connection events.
bluetooth_connection_callback = interface +c {
    # Called once when the connection has opened successfully.
    on_open();

    # Called once when the connection ends for any reason. Returns true iff
    # caller should retry the connection.
    on_done(error: error): bool;

    # Called every time data is read from the connection. Callee must consume
    # (or buffer) all bytes.
    on_read(bytes: binary);
}
